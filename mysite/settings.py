"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
# 配置文件
# 载入系统
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# django会执行一些安全的验证
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&s1lxpvghot3kjxw&7$vaze#y41-@3j0uoq$&9jvr#9m-%@5n5'

# SECURITY WARNING: don't run with debug turned on in production!
# 将dubug关掉了
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition
# 里面有一些默认的安装application
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 把新建的myblog app挂载到项目内
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'myblog'
]

# 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 路由 urls.py 整个网站所提供的路由在urls.py
ROOT_URLCONF = 'mysite.urls'

# 网页文件Html文件 它的模板位置放在了哪里
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 路径 即在我们的app内,哪个文件夹会存放一些路径
        # 这样,django会从myblog文件夹下的templates文件夹下去寻找网页Html文件
        'DIRS': [os.path.join(BASE_DIR, 'templates').replace('\\', '/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ！！Python环境下的Web服务器网关接口！！
# 如何理解呢?我们整个项目是运行在8000端口,而我们正常访问一个域名,通用的是80端口
# 因此,我们项目运行在8000端口,但是想让用户在80端口访问。
# 我们在nginx进行设置,当用户通过nginx这个http代理服务去映射我们这个wsgi网关接口对接的是哪个端口
# wsgi起得是信息输出的作用
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
# ！！可以设置我们django项目默认可以使用哪些数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    # 配置mysql 分别为在本机运行的数据库名称、USER...等字段
    'mysql': {
        'ENGINE': 'django.db.backends.mysql',
        # 连接我们本机在3306端口运行的数据库
        'NAME': 'myblog',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '3306'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
# 我们需要告诉django我们以后的CSS,JS,Images是存放在哪个路径下的,Static为静态资源文件夹
STATIC_URL = '/static/'
# 媒体文件夹,媒体目录
MEDIA_URL = '/upload/'
# (指定了MEDIA路由的根目录是upload)
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload').replace('\\', '/')


# 配置cors
CORS_ALLOW_CREDENTIALS = True  # 指明在跨域访问中，后端是否支持对cookie的操作。
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1',
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)
